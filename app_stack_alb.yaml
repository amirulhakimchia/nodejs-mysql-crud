Description: 'Deploys an APP stack for the CRUD Application'
Parameters:
  AppAMI:
    Type: String
    Default: ''
    Description: AMI of the CRUD App
  VPCCloudformationStack:
    Type: String
    Default: ''
    Description: 'Please enter the name of the VPC stack'
  KeyName:
    Type: String
    Description: Enter the key name for resource access.
Resources:
  ELBV2HTTPSLISTENER:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref APPELBV2
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref ELBV2TGAPP
          Type: forward
  APPELBV2:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref SGAPPELBV2
      Subnets:
        - {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-PublicSubnetA'}
        - {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-PublicSubnetB'}
      Tags:
        - Key: Name
          Value:
            !Join
              - '-'
              - - 'lb'
                - !Ref AWS::StackName
                - 'crud'
  ELBV2TGAPP:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 3000
      Protocol: HTTP
      VpcId: {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-VPCID'}
      Tags:
        - Key: Name
          Value:
            !Join
              - '-'
              - - 'tg'
                - !Ref AWS::StackName
                - !GetAtt APPELBV2.LoadBalancerName
  LCAPPCRUD:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      LaunchConfigurationName:
        !Join
          - '-'
          - - 'lc'
            - 'app'
            - !Ref AppAMI
      KeyName:
        Ref: KeyName
      ImageId: !Ref AppAMI
      SecurityGroups:
        - !Ref SGAPPEC2
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            Encrypted: true
      AssociatePublicIpAddress: 'false'
  ASGAPPCRUD:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName:
        !Join
          - '-'
          - - 'asg'
            - 'crud'
            - !Ref AppAMI
      VPCZoneIdentifier:
        - {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-PrivateSubnetA'}
        - {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-PrivateSubnetB'}
      LaunchConfigurationName: !Ref LCAPPCRUD
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref ELBV2TGAPP
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value:
            !Join
              - '-'
              - - 'ec2'
                - !Ref AWS::StackName
                - 'crud'
          PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  SGAPPELBV2: 
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Load Balancer incoming Traffic group
      SecurityGroupIngress: 
        - IpProtocol: tcp 
          FromPort: 80 
          ToPort: 80
          CidrIp: 119.74.125.93/32 
      VpcId: {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-VPCID'} 
      Tags: 
        - Key: Name 
          Value:  
            !Join 
              - '-' 
              - - 'lb' 
                - !Ref AWS::StackName 
                - 'sg'
  SGAPPEC2: 
    Type: 'AWS::EC2::SecurityGroup' 
    Properties: 
      GroupDescription: EC2 Incoming traffic from Load Balancer 
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt SGAPPELBV2.GroupId 
      VpcId: {'Fn::ImportValue': !Sub '${VPCCloudformationStack}-VPCID'} 
      Tags: 
        - Key: Name 
          Value:  
            !Join 
              - '-' 
              - - 'sg' 
                - !Ref AWS::StackName 
                - 'ec2'